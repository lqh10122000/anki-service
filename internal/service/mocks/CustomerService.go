// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "complaint-service/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// CustomerService is an autogenerated mock type for the CustomerService type
type CustomerService struct {
	mock.Mock
}

// Create provides a mock function with given fields: customer
func (_m *CustomerService) Create(customer *model.Customer) error {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *CustomerService) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *CustomerService) GetAll() ([]model.Customer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Customer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPaginated provides a mock function with given fields: offset, limit, order
func (_m *CustomerService) GetAllPaginated(offset int, limit int, order string) ([]model.Customer, int64, error) {
	ret := _m.Called(offset, limit, order)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPaginated")
	}

	var r0 []model.Customer
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]model.Customer, int64, error)); ok {
		return rf(offset, limit, order)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []model.Customer); ok {
		r0 = rf(offset, limit, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int64); ok {
		r1 = rf(offset, limit, order)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(offset, limit, order)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: id, customer
func (_m *CustomerService) Update(id uint, customer *model.Customer) error {
	ret := _m.Called(id, customer)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *model.Customer) error); ok {
		r0 = rf(id, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCustomerService creates a new instance of CustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerService {
	mock := &CustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
